###########################################################################
{{:http://caml.inria.fr/pub/docs/manual-ocaml/libref/Marshal.html}Marshal}
href="Memcached.Value.html#TYPEt">t<\/a><\/code><\/pre><\/body><\/html>/;"
href="Memcached.S.html#TYPEt">t<\/a><\/code><\/pre><pre><span
href="Memcached.html#TYPEt">t<\/a><\/code><\/pre><pre><span
href="Memcached.html#TYPEt">t<\/a><\/code><\/pre><br>$/;"
http://www.ocaml.info/home/ocaml_sources.html
href="Memcached.S.html#TYPEvalue">value<\/a>
$(FILTERED_OXRIDL:%.oxridl=$(MLDEPDIR)/%.d)
$(FILTERED_GLADE:%.glade=$(MLDEPDIR)/%.d)
dir,$(LIBDIRS),$(CLIBS:%=$(dir)/lib%.a)))
toupper(substr($$0,1,1))substr($$0,2)}')
href="Memcached.Value.html#TYPEt">t<\/a>
$(FILTERED_IDL:%.idl=%_stubs.$(EXT_OBJ))
dir,$(LIBDIRS),$(CLIBS:%=$(dir)/%.lib)))
doc/memcached/html/Memcached.Value.html
name="2_Functorialinterface"><\/a>$/;"
list<\/code><\/pre><\/body><\/html>/;"
doc/memcached/html/Memcached.Make.html
$(FILTERED_ZOG:%.zog=$(MLDEPDIR)/%.d)
$(FILTERED_REP:%.rep=$(MLDEPDIR)/%.d)
$(FILTERED_MLY:%.mly=$(MLDEPDIR)/%.d)
$(FILTERED_MLL:%.mll=$(MLDEPDIR)/%.d)
$(FILTERED_IDL:%.idl=$(MLDEPDIR)/%.d)
$(DOC_DIR)/$(RESULT)/html/index.html:
$(OBJ_C_CXX:.$(EXT_CXX)=.$(EXT_OBJ))
name="VALdisconnect"><\/a>disconnect
libhashkit_murmur(String_val(data),
href="Memcached.S.html#TYPEt">t<\/a>
$(DOC_DIR)/$(RESULT)/html/index.html
name="2_Genericinterface"><\/a>$/;"
{{:http://memcached.org/}memcached}
$(FILTERED_ML:%.ml=$(MLDEPDIR)/%.d)
doc/memcached/html/Memcached.S.html
$(DOC_DIR)/$(RESULT)/latex/doc.tex:
$(DOC_DIR)/$(RESULT)/latex/doc.pdf:
$(OCAML_DEFAULT_DIRS:%=-LIBPATH:%)
name="VALto_string"><\/a>to_string
name="VALof_string"><\/a>of_string
href="Memcached.html#TYPEt">t<\/a>
$(EXTLIBDIRS:%=-Wl,$(RPATH_FLAG)%)
$(DOC_DIR)/$(RESULT)/latex/doc.tex
$(DOC_DIR)/$(RESULT)/latex/doc.ps:
$(DOC_DIR)/$(RESULT)/latex/doc.pdf
doc/memcached/html/Memcached.html
$(DOC_DIR)/$(RESULT)/latex/doc.ps
$(FILTERED_C_CXX:.c=.$(EXT_OBJ))
/dhiebert@users.sourceforge.net/
-Wl,--allow-multiple-definition
string<\/code><\/pre><pre><span
option<\/code><\/pre><pre><span
$(MLIDEPS:%.di=$(NCDIDIR)/%.di)
$(MLIDEPS:%.di=$(BCDIDIR)/%.di)
$(FILTERED_OXRIDL:.oxridl=.mli)
$(FILTERED_IDL:%.idl=%_stubs.c)
serialization/de-serialization
profiling-native-code-library:
'$(OCAMLLIBPATH)/ocamlrun.lib'
name="VALreplace"><\/a>replace
name="VALconnect"><\/a>connect
$(FILTERED_OXRIDL:.oxridl=.ml)
$(FILTERED_OXRIDL:.oxridl=.di)
profiling-native-code-library
$(OCAML_DEFAULT_DIRS:%=-ccopt
$(IMPLO_INTF:%.mli.cmi=%.cmi)
bool<\/code><\/pre><pre><span
"--warn-undefined-variables"
profiling-byte-code-library:
$(PRE_OCAML_FIND_PREDICATES)
'$(OCAMLLIBPATH)/ocamlrun.a'
name="VALdelete"><\/a>delete
name="VALcreate"><\/a>create
$(IMPL_CMO:.cmo=.$(EXT_OBJ))
http://ctags.sourceforge.net
$(FILTERED_GLADE:.glade=.ml)
class="keyword">type<\/span>
$(space),$(comma),$(PREDS))
$(space),$(comma),$(PACKS))
$(SOURCE_DIRS:%=-LIBPATH:%)
profiling-byte-code-library
$(OCAML_DEFAULT_DIRS:%=-L%)
$(OCAML_DEFAULT_DIRS:%=-I%)
$(OBJ_C_CXX:.m=.$(EXT_OBJ))
name="TYPEvalue"><\/a><code
$(LIB_PACK_NAME).$(EXT_OBJ)
$(DOC_DIR)/$(RESULT)/latex:
class="keyword">val<\/span>
caml_string_length(data));
subproj,$(SUBPROJS),$(eval
serializing/de-serializing
$(PRE_OCAML_FIND_PACKAGES)
name="VALstats"><\/a>stats
make_subproj,$(subproj))))
lib$(CLIB_BASE).$(EXT_LIB)
int<\/code><\/pre><br>$/;"
$(EXTLIBDIRS:%=-LIBPATH:%)
$(DOC_DIR)/$(RESULT)/latex
$(DOC_DIR)/$(RESULT)/html:
debug-native-code-library:
class="type"><\/code>value
$(CFRAMEWORKS:%=-framework
REAL_RESULT="$(NCRESULT)"
REAL_RESULT="$(BCRESULT)"
REAL_OCAMLC="$(OCAMLOPT)"
PRE_OCAML_FIND_PREDICATES
option<\/code><\/pre><div
$(OCAML_DEFAULT_DIRS:%=-I
hostname).h_addr_list.(0)
$(FILTERED_MLY:.mly=.mli)
$(FILTERED_IDL:.idl=.mli)
$(DOC_DIR)/$(RESULT)/html
debug-native-code-nolink:
debug-native-code-library
*************************
-Wl,--export-all-symbols
-Wl,--enable-auto-import
test_replace_nonexistent
$(RESULT)$(RES_CLIB_SUF)
PostScript-documentation
$(OCAML_FIND_PREDICATES)
name="VALincr"><\/a>incr
name="VALhash"><\/a>hash
name="VALdecr"><\/a>decr
Module:Continuum/ConnKey
Memcached.Make(Ints)$/;"
$(FILTERED_ZOG:.zog=.ml)
$(FILTERED_REP:.rep=.ml)
$(FILTERED_MLY:.mly=.ml)
$(FILTERED_MLY:.mly=.di)
$(FILTERED_MLL:.mll=.ml)
$(FILTERED_MLI:.mli=.di)
$(FILTERED_IDL:.idl=.ml)
$(FILTERED_IDL:.idl=.di)
debug-native-code-nolink
Continuum.connection_for
class="type">+'a<\/code>
$(CAMELEON_REPORT_FLAGS)
test_delete_nonexistent
$(SUBPROJS:%=subproj_%)
PRE_OCAML_FIND_PACKAGES
$(OCAMLLIBPATH)/contrib
$(OCAML_LIB_INSTALL)\n"
$(OCAML_DEP_PREDICATES)
name="TYPEt"><\/a><code
list<\/code><\/pre><div
libinstall-native-code:
<libhashkit/hashkit.h>
$(LIBDIRS:%=-LIBPATH:%)
$(IMPLO_INTF:.cmo=.cmx)
$(IMPL_CMO:.cmo=.annot)
$(FILTERED_IDL:.idl=.h)
.$(EXT_CXX).$(EXT_OBJ):
$(CAMELEON_ZOGGY_FLAGS)
bool<\/code><\/pre><div
$(ALLML:%.mli=%.mli.__)
/usr/local/lib/camlp4)
test_spaces_in_key_set
test/memcached_test.ml
$(SOURCE_DIRS:%=-ccopt
profiling-native-code:
Pervasives.compare$/;"
$(OCAMLMLIB_EXISTS)),)
$(OCAML_GLADECC_FLAGS)
$(OCAML_FIND_PACKAGES)
$(OCAMLFIND_INSTFLAGS)
$(NCRESULT).$(EXT_OBJ)
$(NCRESULT).$(EXT_LIB)
name="VALset"><\/a>set
name="VALget"><\/a>get
name="VALadd"><\/a>add
Memcached.Make(Ints)]}
libinstall-native-code
class="type"><\/code>t
$(CFRAMEWORKS:%=-cclib
$(BCRESULT).$(EXT_LIB)
/usr/local/lib/ocaml)
!_TAG_PROGRAM_VERSION
$(SPECIAL_OCAMLFLAGS)
$(RESULT).$(EXT_LIB):
profiling-native-code
..\/OCamlMakefile$/;"
$(OCAML_LIB_INSTALL);
OCAML_FIND_PREDICATES
$(OCAML_FIND_LINKPKG)
$(OCAML_DEP_PACKAGES)
memcached_test.ml$/;"
Memcached_impl(struct
Map.Make(ConnKey)$/;"
$(LIB_PACK_NAME).cmx:
$(LIB_PACK_NAME).cmo:
libinstall-byte-code:
$(IMPL_CMO:.cmo=.cmx)
$(IMPL_CMO:.cmo=.asm)
$(EXTLIBDIRS:%=-ccopt
CAMELEON_REPORT_FLAGS
<atte.kojo@gmail.com>
2_Functorialinterface
test_removing_server
test_get_nonexistent
!_TAG_PROGRAM_AUTHOR
$(SOURCE_DIRS:%=-L%)
$(SOURCE_DIRS:%=-I%)
$(RESULT).$(EXT_LIB)
profiling-byte-code:
$(OCAML_LIB_INSTALL)
OCAML_DEP_PREDICATES
native-code-library:
$(LIB_PACK_NAME).cmx
$(LIB_PACK_NAME).cmo
$(LIB_PACK_NAME).cmi
$(LIBINSTALL_FILES))
$(LIBINSTALL_FILES);
libinstall-byte-code
$(DOC_DIR)/$(RESULT)
connection.input$/;"
connection_finalizer
CAMLreturn(result);
CAMLlocal1(result);
caml_copy_int32(h);
CAMELEON_ZOGGY_FLAGS
####################
-Wl,--whole-archive
-Wl,$(RPATH_FLAG)%)
shutdown_connection
-short-functors$/;"
$(REAL_RESULT).dll:
profiling-byte-code
$(OCAMLMKLIB_FLAGS)
OCAML_GLADECC_FLAGS
OCAML_FIND_PACKAGES
OCAMLFIND_INSTFLAGS
native-code-nolink:
native-code-library
$(MAYBE_IDL_HEADER)
Marshal.from_string
$(LIBINSTALL_FILES)
Latex-documentation
-I'$(OCAMLLIBPATH)'
$(IMPL_CMO:.cmo=.s)
ignore(really_input
$(FIRST_DOC_FILE)`;
$(EXTLIBDIRS:%=-L%)
dll$(CLIB_BASE).dll
debug-code-library:
class="type">string
test_empty_key_set
test_empty_key_get
!_TAG_PROGRAM_NAME
SPECIAL_OCAMLFLAGS
$(SOURCE_DIRS:%=-I
Pervasives.compare
OCaml-installation
OCAML_FIND_LINKPKG
OCAML_DEP_PACKAGES
OCAML_DEFAULT_DIRS
-NODEFAULTLIB:LIBC
native-code-nolink
memcached_test$/;"
[Memcached.replace
memcached_native.c
{!Memcached.Make}.
$(LIBDIRS:%=-ccopt
$(LDFLAGS:%=-ccopt
HTML-documentation
$(FILTERED_IDL)),)
($(ELF_RPATH),yes)
dll$(CLIB_BASE).so
debug-native-code:
debug-code-nolink:
debug-code-library
CAMLparam1(data);
<caml/mlvalues.h>
$(CAMLIDLDLLFLAGS)
$(CAMELEON_REPORT)
byte-code-library:
$(ALL_OCAMLCFLAGS)
(ADDR_INET(h_addr,
2_Genericinterface
test_add_existing
!_TAG_PROGRAM_URL
!_TAG_FILE_SORTED
!_TAG_FILE_FORMAT
($(SYSTEM),win32)
($(SYSTEM),mingw)
string_of_int$/;"
$(REAL_OCAMLFIND)
$(REAL_IMPL_INTF)
PDF-documentation
pack-native-code:
OCamlMakefile$/;"
OCAML_LIB_INSTALL
"\nUninstallation
$*.mli.temporary;
{!Memcached.Make}
[Memcached.delete
..\/memcached$/;"
Marshal.to_string
Map.Make(ConnKey)
language-agnostic
int_of_string$/;"
ignore(input_line
hash_murmur(value
$(ELF_RPATH_FLAG)
.DELETE_ON_ERROR:
debug-native-code
debug-code-nolink
$(CPPFLAGS_WIN32)
(ConnMap.is_empty
$(COMMON_LDFLAGS)
class="type">unit
class="info">$/;"
c.continuum.(idx)
$(CAMELEON_ZOGGY)
byte-code-nolink:
byte-code-library
-----------------
(Value.of_string
\\t\\r\\n]+"$/;"
test_set_and_get
test_empty_value
pack-native-code
-out:$(RES_CLIB)
out_channel;$/;"
$(OCAMLNLDFLAGS)
OCAMLMLIB_EXISTS
OCAMLMKLIB_FLAGS
$(OCAMLMAKEFILE)
OCAMLLDFLAGS="-g
$(OCAMLLDFLAGS)"
$(OCAML_GLADECC)
$(OCAMLDOCFLAGS)
$(OCAMLBLDFLAGS)
NONINFRINGEMENT.
new_connections;
$(NCRESULT).cmxa
$(NCDIDIR)/%.di:
native-code-dll:
Module:Continuum
$*.ml.temporary;
$*.mli.temporary
$(MLDEPDIR)/%.d:
MERCHANTABILITY,
[Memcached.stats
memcached.ml$/;"
"memcached.cmxa"
MAYBE_IDL_HEADER
$(LIBS:%=%.cmxa)
$(LIB_PACK_NAME)
LIBINSTALL_FILES
$(LIBDIRS:%=-L%)
interoperability
$(INCDIRS:%=-I%)
ignore(read_line
$(FOR_PACK_NAME)
$(FILTER_EXTNS),
.DELETE_ON_ERROR
Continuum.remove
connection.input
$(CLIBS:%=-cclib
$(CLIB_BASE).lib
$(CLIB_BASE).exp
$(CFRAMEWORKS))"
<caml/memory.h>
byte-code-nolink
Value.to_string
Value.of_string
type:connection
test_pool_store
test_no_servers
start_memcached
-short-functors
$(RESULT).cmxa,
$(REAL_RESULT):
$(QUIET)pp=`sed
$(QUIET)$(MAKE)
$(PIC_CPPFLAGS)
pack-byte-code:
open_connection
ocamlyacc-flags
$(OCAMLNCFLAGS)
'OcamlMakefile'
$(OCAMLLDFLAGS)
$(OCAMLCPFLAGS)
$(OCAMLBCFLAGS)
"\nUninstalling
"\nInstallation
new_connections
$(NCRESULT).exp
$(NCRESULT).dll
$(NCRESULT).cmx
$(NCRESULT).cmi
$(NCRESULT).cma
native-code-dll
$*.ml.temporary
[Memcached.incr
[Memcached.decr
"memcached.cma"
$(LIBS:%=%.cma)
in_channel;$/;"
/,$(i)),$(i))))
-I$(CAMLP4PATH)
hash_murmur$/;"
FILTERED_OXRIDL
Continuum.t$/;"
Continuum.empty
.cmxa,$(foreach
class="type">'a
class="type"><a
$(CFLAGS_WIN32)
c.continuum.(0)
$(CAMLIDLFLAGS)
CAMLIDLDLLFLAGS
CAMELEON_REPORT
$(BCRESULT).exp
$(BCRESULT).dll
$(BCRESULT).cmo
$(BCRESULT).cmi
$(BCRESULT).cma
$(BCDIDIR)/%.di
archive(native)
ALL_OCAMLCFLAGS
$(ALL_LDFLAGS))
adding/removing
?wait_time:int
%$(TOPSUFFIX):
$(THREAD_FLAG)
test_underflow
successful.\n"
"$(SUBTARGET)"
(String.concat
"SERVER_ERROR"
$(RESULT).cmxa
$(RESULT).cma:
$(RESULT).cma,
representation
REAL_OCAMLFIND
$(REAL_OCAMLC)
REAL_IMPL_INTF
$(QUIET)printf
$(PRE_TARGETS)
pack-byte-code
$(OCAMLMKLIB))
"OCamlMakefile
OCAMLFLAGS="-g
$(OCAMLFLAGS)"
$(OBJ_LINK)),)
["NOT_STORED"]
$(NOIDLHEADER)
.ml.$(EXT_OBJ)
.m.$(EXT_OBJ):
Memcached_test
[Memcached.set
Memcached_impl
[Memcached.get
[Memcached.add
List.fold_left
library-paths,
$(LDFLAGS:%=%)
-l$(CLIB_BASE)
(int_of_string
$(INTF_OCAMLC)
$(INCDIRS:%=-I
$(IMPLO_INTF))
$(IMPLO_INTF),
implementation
i,$(LIBS),$(if
(gethostbyname
FIRST_DOC_FILE
FILTERED_GLADE
FILTERED_C_CXX
$(FILTERED))))
ELF_RPATH_FLAG
($(ELF_RPATH),
CREATE_LIB=yes
CPPFLAGS_WIN32
Continuum.find
ConnMap.t;$/;"
ConnMap.remove
ConnMap.empty;
connection_for
communications
COMMON_LDFLAGS
-colorize-code
.cma,$(foreach
"CLIENT_ERROR"
$(CLIBS:%=-l%)
.c.$(EXT_OBJ):
c.connections)
CAMELEON_ZOGGY
byte-code-dll:
$(AUTO_OXRIDL)
$(ALL_LDFLAGS)
$(TOPSUFFIX),
test/Makefile
$(SUBTARGET);
subproj_$(1):
string_of_int
String.length
String.create
start_servers
